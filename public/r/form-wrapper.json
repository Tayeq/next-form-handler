{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-wrapper",
  "type": "registry:component",
  "title": "Form Wrapper",
  "description": "A form wrapper component",
  "dependencies": [
    "react@19",
    "react-hook-form",
    "next-form-handler",
    "sonner"
  ],
  "registryDependencies": [
    "form"
  ],
  "files": [
    {
      "path": "./registry/components/form-wrapper.tsx",
      "content": "\"use client\";\n\nimport {createContext, PropsWithChildren, ReactElement, useContext} from \"react\";\nimport type {FieldValues, Path, UseFormReturn} from \"react-hook-form\";\nimport {Form} from \"@/components/ui/form\";\nimport {toast} from \"sonner\"\nimport {\n    createSubmitHandler,\n    type FormAction,\n    FormErrorState,\n    FormSuccessState,\n    useFormHandler,\n    UseFormHandlerReturn,\n} from \"next-form-handler\";\n\nexport interface FormWrapperProps<TData, TFieldValues extends FieldValues> extends PropsWithChildren {\n    action: FormAction<TData>;\n    form: UseFormReturn<TFieldValues>;\n    onSuccess?: (state: FormSuccessState<TData>) => void;\n    onError?: (state: FormErrorState) => void;\n}\n\nconst FormWrapperContext = createContext<UseFormHandlerReturn>({} as UseFormHandlerReturn);\n\nexport function FormWrapper<TData, TFieldValues extends FieldValues>({\n                                                                         action,\n                                                                         form,\n                                                                         children,\n                                                                         onSuccess,\n                                                                         onError\n                                                                     }: FormWrapperProps<TData, TFieldValues>): ReactElement {\n\n    const formHandler = useFormHandler<TData>(action, (state) => {\n        onSuccess?.(state);\n        if (state.message) {\n            toast.success(state.message);\n        }\n    }, (state) => {\n        onError?.(state);\n        toast.error(state.error);\n        if (state.validationErrors) {\n            state.validationErrors.forEach((error) => {\n                const path: Path<TFieldValues> = error.path.join(\".\") as Path<TFieldValues>;\n                form.setError(path, {\n                    message: error.message,\n                });\n            });\n        }\n    });\n    const onSubmit = form.handleSubmit(createSubmitHandler(formHandler.formAction));\n\n    return (\n        <FormWrapperContext.Provider value={formHandler}>\n            <Form {...form}>\n                <form onSubmit={onSubmit}>{children}</form>\n            </Form>\n        </FormWrapperContext.Provider>\n    );\n}\n\nexport function useFormWrapper() {\n    return useContext(FormWrapperContext);\n}\n",
      "type": "registry:component"
    }
  ]
}